using StaticArrays: SVector

using SurfaceFluxes
using SurfaceFluxes: ValuesOnly, surface_conditions

import Thermodynamics
using Thermodynamics: Liquid
using Thermodynamics: PhaseNonEquil_œÅTq, PhasePartition 
using Thermodynamics: saturation_vapor_pressure, q_vap_saturation_from_density

using ClimaAtmos.SurfaceConditions: scalar_flux, vector_flux
using ClimaCore.Utilities: half
using Oceananigans.Models: AbstractModel

const saturation_vapor_specific_humidity = Thermodynamics.q_vap_saturation_generic

struct SingleColumnAtmosOceanModel{C, G, A, O, F, P} <: AbstractModel{Nothing}
    clock :: C
    grid :: G
    atmos :: A
    ocean :: O
    surface :: F
    parameters :: P
end

function SingleColumnAtmosOceanModel(atmos, ocean)
    grid = ocean.model.grid
    clock = ocean.model.clock
    surface = nothing

    ‚ÑÇ·µÄ = ClimaAtmos.Parameters.thermodynamics_params(atmos.integrator.p.params) 
    ‚ÑÇ·¥∂ = ClimaAtmos.Parameters.surface_fluxes_params(atmos.integrator.p.params) 

    parameters = (
        thermodynamics = ‚ÑÇ·µÄ,
        surface_fluxes = ‚ÑÇ·¥∂,
    )

    return SingleColumnAtmosOceanModel(clock, grid, atmos, ocean, surface, parameters)
end

"""
    air_sea_turbulent_fluxes(‚Ñã‚Çê, T‚Çí, u‚Çê, v‚Çê, u‚Çí, v‚Çí, z‚Çê, z‚Çí, ‚ÑÇ·µÄ, ‚ÑÇ·¥∂)

Compute turbluent air-sea fluxes of sensible heat, latent heat, water vapor, and momentum.
"""
@inline function air_sea_turbulent_fluxes(‚ÑÇ·µÄ, ‚ÑÇ·¥∂, ‚Ñã‚Çê, u‚Çê, v‚Çê, z‚Çê, T‚Çí, u‚Çí, v‚Çí, z‚Çí)

    # Assemble atmosphere dynamical state
    ùïå‚Çê = SurfaceFluxes.StateValues(z‚Çê, SVector(u‚Çê, v‚Çê), ‚Ñã‚Çê)

    # Extrapolate to get surface density
    cv‚Çò = Thermodynamics.cv_m(‚ÑÇ·µÄ, ‚Ñã‚Çê)
    R‚Çê = Thermodynamics.gas_constant_air(‚ÑÇ·µÄ, ‚Ñã‚Çê)
    Œ∫‚Çê = cv‚Çò / R‚Çê
    œÅ‚Çê = Thermodynamics.air_density(‚ÑÇ·µÄ, ‚Ñã‚Çê)
    T‚Çê = Thermodynamics.air_temperature(‚ÑÇ·µÄ, ‚Ñã‚Çê)
    œÅ‚Çõ = œÅ‚Çê * (T‚Çí / T‚Çê)^Œ∫‚Çê

    # Compute saturation vapor specific humidity over seawater
    FT = typeof(œÅ‚Çõ)

    # Reference value for the mole fraction of H‚ÇÇO in seawater.
    # The actual value depends on salinity.
    x_H‚ÇÇO = convert(FT, 0.98) 
    q‚òÖ = x_H‚ÇÇO * saturation_vapor_specific_humidity(‚ÑÇ·µÄ, T‚Çí, œÅ‚Çõ, Liquid())
    
    q‚Çõ = PhasePartition(q‚òÖ)
    ‚Ñã‚Çõ = PhaseNonEquil_œÅTq(‚ÑÇ·µÄ, œÅ‚Çõ, T‚Çí, q‚Çõ)
    ùïå‚Çõ = SurfaceFluxes.StateValues(z‚Çí, SVector(u‚Çí, v‚Çí), ‚Ñã‚Çõ)

    # Roughness and gustiness
    ‚Ñì‚Çò = convert(FT, 1e-4)
    ‚Ñì‚Çï = convert(FT, 1e-4)
    Ug = convert(FT, 1e-1)

    input = ValuesOnly(ùïå‚Çê, ùïå‚Çõ, ‚Ñì‚Çò, ‚Ñì‚Çï, gustiness=Ug)
    fluxes = surface_conditions(‚ÑÇ·¥∂, input)

    return (sensible_heat = fluxes.shf,
            latent_heat = fluxes.lhf,
            vapor = fluxes.evaporation,
            x_momentum = fluxes.œÅœÑxz,
            y_momentum = fluxes.œÅœÑyz)
end

function time_step!(scm::SingleColumnAtmosOceanModel, Œît)

    atmos = scm.atmos
    ocean = scm.ocean

    # Compute fluxes
    UÃÇ ∞ = atmos.integrator.u.c.u‚Çï # covariant velocity
    UÃÇ ∞‚ÇÅ = level(UÃÇ ∞, 1)
    ‚Ñã = atmos.integrator.p.precomputed.·∂úts
    ‚Ñã‚ÇÅ = level(‚Ñã, 1)

    UÃÇ ∞ = atmos.integrator.u.c.u‚Çï # covariant velocity
    UÃÇ ∞‚ÇÅ = level(UÃÇ ∞, 1)
    U ∞‚ÇÅ = ClimaCore.Geometry.UVVector.(UÃÇ ∞‚ÇÅ)
    u‚ÇÅ = U ∞‚ÇÅ.components.data.:1
    v‚ÇÅ = U ∞‚ÇÅ.components.data.:2

    X = coordinate_field(atmos.integrator.u.c)
    z‚ÇÅ = level(X.z, 1)

    # Build ocean state
    surface_layer_space = axes(u‚ÇÅ)
    z‚ÇÄ = zeros(surface_layer_space)
    u‚ÇÄ = zeros(surface_layer_space)
    v‚ÇÄ = zeros(surface_layer_space)
    T‚ÇÄ = zeros(surface_layer_space)

    Nz = size(ocean.model.grid, 3)
    u‚Çí = ocean.model.velocities.u[1, 1, Nz]
    v‚Çí = ocean.model.velocities.v[1, 1, Nz]
    T‚Çí = ocean.model.tracers.T[1, 1, Nz]
    S‚Çí = ocean.model.tracers.S[1, 1, Nz]

    z‚ÇÄ .= 0
    u‚ÇÄ .= u‚Çí
    v‚ÇÄ .= v‚Çí
    T‚ÇÄ .= T‚Çí .+ 273.15

    ‚ÑÇ·µÄ = scm.parameters.thermodynamics
    ‚ÑÇ·¥∂ = scm.parameters.surface_fluxes

    turbulent_fluxes = air_sea_turbulent_fluxes.(Ref(‚ÑÇ·µÄ), Ref(‚ÑÇ·¥∂),
                                                 ‚Ñã‚ÇÅ, u‚ÇÅ, v‚ÇÅ, z‚ÇÅ,
                                                 T‚ÇÄ, u‚ÇÄ, v‚ÇÄ, z‚ÇÄ)

    @show turbulent_fluxes 

    # 1. Set turbulent fluxes in ocean
    # 2. Set turbulent fluxes in atmos
    
    c = atmos.integrator.p.scratch.·∂†temp_scalar
    ùí¢ = Fields.level(Fields.local_geometry_field(c), half)
    œÅwh = atmos.integrator.p.precomputed.sfc_conditions.œÅ_flux_h_tot 
    œÅwq = atmos.integrator.p.precomputed.sfc_conditions.œÅ_flux_q_tot 
    œÅœÑ = atmos.integrator.p.precomputed.sfc_conditions.œÅ_flux_u‚Çï

    œÅœÑxz = turbulent_fluxes.x_momentum
    œÅœÑyz = turbulent_fluxes.y_momentum
    F = turbulent_fluxes.vapor
    Qv = turbulent_fluxes.latent_heat
    Qc = turbulent_fluxes.sensible_heat
    Œ£Q = Qv + Qc

    @. œÅœÑ = vector_flux(œÅœÑxz, œÅœÑyz, ùí¢)
    @. œÅwq = scalar_flux(F, ùí¢)
    @. œÅwh = scalar_flux(Œ£Q, ùí¢)
    
    # 3. Set radiative fluxes in ocean
    # 4. Update surface state in atmos
    radiation = atmos.integrator.p.radiation.radiation_model
    radiation.surface_temperature .= T‚ÇÄ
    radiation.direct_sw_surface_albedo .= 0.03
    radiation.diffuse_sw_surface_albedo .= 0.03

    # Step forward atmos
    # step!(scm.atmos, Œît, true)
    #
    # Step forward ocean
    # ocean.Œît = Œît
    # time_step!(scm.ocean)

    return nothing
end

